create database makank_db;create table users(user_id bigserial,name varchar(32) not null,username varchar(32) not null,email varchar(255),address varchar(150),profile_pic_link varchar(255),user_password varchar(64) not null,user_description varchar(255),constraint users_pk primary key (user_id),constraint email_form check (email like '' or email like '%_@__%.__%'),constraint username_uniqueness unique(username),constraint username_space check (username not like '% %'));create table phone_numbers (user_id bigint,phone_number varchar(11),constraint phone_pk primary key (user_id, phone_number),constraint phone_users_fk foreign key (user_id) references users(user_id) on update restrict on delete restrict,constraint phone_digit check (char_length(phone_number) = 9 or (phone_number ~ '^[0-9]{11}$')), constraint homephone_digit check (char_length(phone_number) = 11 or (phone_number ~ '^[0-9]{9}$')) );create table property (post_id bigserial,post_date date default (current_date),seller_id bigint,property_type varchar(9) not null,price int not null,city varchar(20) not null,property_address varchar(128) not null,area smallint not null,info varchar(255),rooms smallint not null,bathrooms smallint not null,for_rent boolean not null,has_pictures boolean not null,constraint property_pk primary key (post_id),constraint property_users_fk foreign key (seller_id) references users(user_id) on update restrict on delete restrict);create table saved_items (user_id bigint,post_id bigint,constraint saved_pk primary key (user_id, post_id),constraint saved_users_fk foreign key (user_id) references users(user_id) on update restrict on delete restrict,constraint saved_posts_fk foreign key (post_id) references property(post_id) on update cascade on delete cascade);create table property_pictures (post_id bigint,pic_link varchar(255),constraint pictures_pk primary key (post_id, pic_link),constraint pictures_property_fk foreign key (post_id) references property(post_id) on update cascade on delete cascade);create table apartment (post_id bigint,has_elevator boolean not null,apartment_level smallint,for_students boolean not null,constraint apartment_pk primary key (post_id),constraint apartment_property_fk foreign key (post_id) references property(post_id) on update cascade on delete cascade);create table villa (post_id bigint,villa_levels smallint,has_pool boolean,has_garden boolean,constraint villa_pk primary key (post_id),constraint villa_property_fk foreign key (post_id) references property(post_id) on update cascade on delete cascade);create view login_credentials asselect user_id, username, user_passwordfrom users;create or replace function post_large_view(postID int8)returns json as $$declare propertyType varchar(9);declare res JSON;declare temp json; begin        select property.property_type into propertyType        from property        where property.post_id = postID;        if(propertyType = 'villa') then                select json_agg(json_build_object('propertyaddress', p.property_address, 'garden', v.has_garden, 'pool', v.has_pool, 'level', v.villa_levels, 'name', u.name, 'email', u.email, 'price', p.price, 'city', p.city, 'area', p.area, 'rooms', p.rooms, 'bathrooms', p.bathrooms, 'date', p.post_date, 'sellerID', p.seller_id, 'info', p.info, 'rent', p.for_rent)) as item into temp                from property p LEFT OUTER JOIN villa v on p.post_id = v.post_id LEFT OUTER JOIN users u on p.seller_id = u.user_id                where p.post_id = postID;                return temp;         else                select json_agg(json_build_object('propertyaddress', p.property_address, 'name', u.name, 'email', u.email, 'price', p.price, 'city', p.city, 'area', p.area, 'rooms', p.rooms, 'bathrooms', p.bathrooms, 'date', p.post_date, 'sellerID', p.seller_id, 'info', p.info, 'rent', p.for_rent)) as item into temp                from property p JOIN apartment a on p.post_id = a.post_id JOIN users u on p.seller_id = u.user_id                where p.post_id = postID;                return temp;                        end if;        end;$$ language plpgsql;